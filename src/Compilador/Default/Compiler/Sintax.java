
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador.Default.Compiler;

import java_cup.runtime.Symbol;
import java.util.Stack;
import org.json.JSONObject;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\307\000\002\002\004\000\002\102\002\000\002\103" +
    "\002\000\002\002\013\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\005" +
    "\000\002\005\003\000\002\005\004\000\002\104\002\000" +
    "\002\005\005\000\002\105\002\000\002\006\006\000\002" +
    "\106\002\000\002\006\007\000\002\006\005\000\002\006" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\010\003\000\002\010\003\000" +
    "\002\073\006\000\002\074\003\000\002\074\002\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\005\000\002\015\007\000\002\075\010\000\002\075" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\002\000\002\017\007\000" +
    "\002\020\007\000\002\021\007\000\002\022\006\000\002" +
    "\023\006\000\002\024\006\000\002\025\006\000\002\026" +
    "\007\000\002\027\003\000\002\027\002\000\002\030\006" +
    "\000\002\031\007\000\002\107\002\000\002\032\010\000" +
    "\002\110\002\000\002\033\005\000\002\111\002\000\002" +
    "\033\005\000\002\112\002\000\002\034\006\000\002\113" +
    "\002\000\002\034\006\000\002\034\002\000\002\035\006" +
    "\000\002\036\006\000\002\037\006\000\002\040\006\000" +
    "\002\041\006\000\002\114\002\000\002\042\010\000\002" +
    "\115\002\000\002\043\005\000\002\116\002\000\002\043" +
    "\005\000\002\117\002\000\002\043\005\000\002\120\002" +
    "\000\002\043\005\000\002\043\002\000\002\121\002\000" +
    "\002\044\006\000\002\122\002\000\002\044\006\000\002" +
    "\123\002\000\002\044\006\000\002\124\002\000\002\044" +
    "\006\000\002\044\002\000\002\125\002\000\002\045\013" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\003\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\051\006\000\002\052\005\000\002\126\002" +
    "\000\002\053\013\000\002\053\003\000\002\127\002\000" +
    "\002\054\007\000\002\054\002\000\002\055\012\000\002" +
    "\130\002\000\002\056\011\000\002\056\002\000\002\076" +
    "\004\000\002\076\004\000\002\077\003\000\002\077\002" +
    "\000\002\131\002\000\002\057\007\000\002\100\004\000" +
    "\002\100\002\000\002\132\002\000\002\133\002\000\002" +
    "\134\002\000\002\135\002\000\002\136\002\000\002\060" +
    "\022\000\002\137\002\000\002\061\006\000\002\140\002" +
    "\000\002\061\007\000\002\061\002\000\002\141\002\000" +
    "\002\062\007\000\002\142\002\000\002\062\010\000\002" +
    "\062\002\000\002\143\002\000\002\063\007\000\002\144" +
    "\002\000\002\063\007\000\002\063\002\000\002\145\002" +
    "\000\002\064\010\000\002\146\002\000\002\064\010\000" +
    "\002\064\002\000\002\147\002\000\002\065\014\000\002" +
    "\150\002\000\002\066\012\000\002\101\006\000\002\101" +
    "\006\000\002\151\002\000\002\152\002\000\002\153\002" +
    "\000\002\154\002\000\002\067\016\000\002\067\002\000" +
    "\002\155\002\000\002\070\006\000\002\070\002\000\002" +
    "\156\002\000\002\071\007\000\002\071\002\000\002\072" +
    "\003\000\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\004\004\000\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\006\011\001\002\000" +
    "\004\007\012\001\002\000\064\010\uffe3\011\052\013\040" +
    "\022\037\023\036\024\027\025\053\026\044\027\050\030" +
    "\017\031\055\032\045\034\075\035\063\036\047\040\015" +
    "\041\062\042\043\043\065\044\073\045\022\053\042\060" +
    "\064\061\060\062\013\001\002\000\004\005\u0197\001\002" +
    "\000\072\010\uffe3\011\052\013\040\022\037\023\036\024" +
    "\027\025\053\026\044\027\050\030\017\031\055\032\045" +
    "\034\075\035\063\036\047\040\015\041\062\042\043\043" +
    "\065\044\073\045\022\053\042\054\uffe3\055\uffe3\057\uffe3" +
    "\060\064\061\060\062\013\001\002\000\004\005\u0193\001" +
    "\002\000\072\010\uffe3\011\052\013\040\022\037\023\036" +
    "\024\027\025\053\026\044\027\050\030\017\031\055\032" +
    "\045\034\075\035\063\036\047\040\015\041\062\042\043" +
    "\043\065\044\073\045\022\053\042\054\uffe3\055\uffe3\057" +
    "\uffe3\060\064\061\060\062\013\001\002\000\004\005\u018f" +
    "\001\002\000\072\010\uffe3\011\052\013\040\022\037\023" +
    "\036\024\027\025\053\026\044\027\050\030\017\031\055" +
    "\032\045\034\075\035\063\036\047\040\015\041\062\042" +
    "\043\043\065\044\073\045\022\053\042\054\uffe3\055\uffe3" +
    "\057\uffe3\060\064\061\060\062\013\001\002\000\004\010" +
    "\uffff\001\002\000\004\005\u015f\001\002\000\072\010\uffe3" +
    "\011\052\013\040\022\037\023\036\024\027\025\053\026" +
    "\044\027\050\030\017\031\055\032\045\034\075\035\063" +
    "\036\047\040\015\041\062\042\043\043\065\044\073\045" +
    "\022\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060" +
    "\062\013\001\002\000\072\010\uffe3\011\052\013\040\022" +
    "\037\023\036\024\027\025\053\026\044\027\050\030\017" +
    "\031\055\032\045\034\075\035\063\036\047\040\015\041" +
    "\062\042\043\043\065\044\073\045\022\053\042\054\uffe3" +
    "\055\uffe3\057\uffe3\060\064\061\060\062\013\001\002\000" +
    "\072\010\uffe3\011\052\013\040\022\037\023\036\024\027" +
    "\025\053\026\044\027\050\030\017\031\055\032\045\034" +
    "\075\035\063\036\047\040\015\041\062\042\043\043\065" +
    "\044\073\045\022\053\042\054\uffe3\055\uffe3\057\uffe3\060" +
    "\064\061\060\062\013\001\002\000\072\010\uffe3\011\052" +
    "\013\040\022\037\023\036\024\027\025\053\026\044\027" +
    "\050\030\017\031\055\032\045\034\075\035\063\036\047" +
    "\040\015\041\062\042\043\043\065\044\073\045\022\053" +
    "\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013" +
    "\001\002\000\004\005\u0157\001\002\000\072\010\uffe3\011" +
    "\052\013\040\022\037\023\036\024\027\025\053\026\044" +
    "\027\050\030\017\031\055\032\045\034\075\035\063\036" +
    "\047\040\015\041\062\042\043\043\065\044\073\045\022" +
    "\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062" +
    "\013\001\002\000\072\010\uffe3\011\052\013\040\022\037" +
    "\023\036\024\027\025\053\026\044\027\050\030\017\031" +
    "\055\032\045\034\075\035\063\036\047\040\015\041\062" +
    "\042\043\043\065\044\073\045\022\053\042\054\uffe3\055" +
    "\uffe3\057\uffe3\060\064\061\060\062\013\001\002\000\072" +
    "\010\uffe3\011\052\013\040\022\037\023\036\024\027\025" +
    "\053\026\044\027\050\030\017\031\055\032\045\034\075" +
    "\035\063\036\047\040\015\041\062\042\043\043\065\044" +
    "\073\045\022\053\042\054\uffe3\055\uffe3\057\uffe3\060\064" +
    "\061\060\062\013\001\002\000\072\010\uffe3\011\052\013" +
    "\040\022\037\023\036\024\027\025\053\026\044\027\050" +
    "\030\017\031\055\032\045\034\075\035\063\036\047\040" +
    "\015\041\062\042\043\043\065\044\073\045\022\053\042" +
    "\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013\001" +
    "\002\000\072\010\uffe3\011\052\013\040\022\037\023\036" +
    "\024\027\025\053\026\044\027\050\030\017\031\055\032" +
    "\045\034\075\035\063\036\047\040\015\041\062\042\043" +
    "\043\065\044\073\045\022\053\042\054\uffe3\055\uffe3\057" +
    "\uffe3\060\064\061\060\062\013\001\002\000\072\010\uffe3" +
    "\011\052\013\040\022\037\023\036\024\027\025\053\026" +
    "\044\027\050\030\017\031\055\032\045\034\075\035\063" +
    "\036\047\040\015\041\062\042\043\043\065\044\073\045" +
    "\022\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060" +
    "\062\013\001\002\000\004\005\u014d\001\002\000\004\005" +
    "\u0149\001\002\000\012\005\u0126\015\123\017\u0125\020\u0123" +
    "\001\002\000\072\010\uffe3\011\052\013\040\022\037\023" +
    "\036\024\027\025\053\026\044\027\050\030\017\031\055" +
    "\032\045\034\075\035\063\036\047\040\015\041\062\042" +
    "\043\043\065\044\073\045\022\053\042\054\uffe3\055\uffe3" +
    "\057\uffe3\060\064\061\060\062\013\001\002\000\004\005" +
    "\u0109\001\002\000\004\005\u0106\001\002\000\004\005\u0103" +
    "\001\002\000\004\005\376\001\002\000\072\010\uffe3\011" +
    "\052\013\040\022\037\023\036\024\027\025\053\026\044" +
    "\027\050\030\017\031\055\032\045\034\075\035\063\036" +
    "\047\040\015\041\062\042\043\043\065\044\073\045\022" +
    "\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062" +
    "\013\001\002\000\004\005\353\001\002\000\004\005\350" +
    "\001\002\000\072\010\uffe3\011\052\013\040\022\037\023" +
    "\036\024\027\025\053\026\044\027\050\030\017\031\055" +
    "\032\045\034\075\035\063\036\047\040\015\041\062\042" +
    "\043\043\065\044\073\045\022\053\042\054\uffe3\055\uffe3" +
    "\057\uffe3\060\064\061\060\062\013\001\002\000\004\013" +
    "\332\001\002\000\004\005\322\001\002\000\072\010\uffe3" +
    "\011\052\013\040\022\037\023\036\024\027\025\053\026" +
    "\044\027\050\030\017\031\055\032\045\034\075\035\063" +
    "\036\047\040\015\041\062\042\043\043\065\044\073\045" +
    "\022\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060" +
    "\062\013\001\002\000\004\005\316\001\002\000\072\010" +
    "\uffe3\011\052\013\040\022\037\023\036\024\027\025\053" +
    "\026\044\027\050\030\017\031\055\032\045\034\075\035" +
    "\063\036\047\040\015\041\062\042\043\043\065\044\073" +
    "\045\022\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061" +
    "\060\062\013\001\002\000\072\010\uffe3\011\052\013\040" +
    "\022\037\023\036\024\027\025\053\026\044\027\050\030" +
    "\017\031\055\032\045\034\075\035\063\036\047\040\015" +
    "\041\062\042\043\043\065\044\073\045\022\053\042\054" +
    "\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013\001\002" +
    "\000\004\007\303\001\002\000\072\010\uffe3\011\052\013" +
    "\040\022\037\023\036\024\027\025\053\026\044\027\050" +
    "\030\017\031\055\032\045\034\075\035\063\036\047\040" +
    "\015\041\062\042\043\043\065\044\073\045\022\053\042" +
    "\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013\001" +
    "\002\000\004\005\277\001\002\000\004\005\273\001\002" +
    "\000\004\005\115\001\002\000\004\005\112\001\002\000" +
    "\072\010\uffe3\011\052\013\040\022\037\023\036\024\027" +
    "\025\053\026\044\027\050\030\017\031\055\032\045\034" +
    "\075\035\063\036\047\040\015\041\062\042\043\043\065" +
    "\044\073\045\022\053\042\054\uffe3\055\uffe3\057\uffe3\060" +
    "\064\061\060\062\013\001\002\000\072\010\uffe3\011\052" +
    "\013\040\022\037\023\036\024\027\025\053\026\044\027" +
    "\050\030\017\031\055\032\045\034\075\035\063\036\047" +
    "\040\015\041\062\042\043\043\065\044\073\045\022\053" +
    "\042\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013" +
    "\001\002\000\072\010\uffe3\011\052\013\040\022\037\023" +
    "\036\024\027\025\053\026\044\027\050\030\017\031\055" +
    "\032\045\034\075\035\063\036\047\040\015\041\062\042" +
    "\043\043\065\044\073\045\022\053\042\054\uffe3\055\uffe3" +
    "\057\uffe3\060\064\061\060\062\013\001\002\000\072\010" +
    "\uffe3\011\052\013\040\022\037\023\036\024\027\025\053" +
    "\026\044\027\050\030\017\031\055\032\045\034\075\035" +
    "\063\036\047\040\015\041\062\042\043\043\065\044\073" +
    "\045\022\053\042\054\uffe3\055\uffe3\057\uffe3\060\064\061" +
    "\060\062\013\001\002\000\072\010\uffe3\011\052\013\040" +
    "\022\037\023\036\024\027\025\053\026\044\027\050\030" +
    "\017\031\055\032\045\034\075\035\063\036\047\040\015" +
    "\041\062\042\043\043\065\044\073\045\022\053\042\054" +
    "\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013\001\002" +
    "\000\004\005\102\001\002\000\072\010\uffe3\011\052\013" +
    "\040\022\037\023\036\024\027\025\053\026\044\027\050" +
    "\030\017\031\055\032\045\034\075\035\063\036\047\040" +
    "\015\041\062\042\043\043\065\044\073\045\022\053\042" +
    "\054\uffe3\055\uffe3\057\uffe3\060\064\061\060\062\013\001" +
    "\002\000\004\005\076\001\002\000\004\006\077\001\002" +
    "\000\004\012\100\001\002\000\072\010\uffae\011\uffae\013" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\034\uffae\035\uffae\036\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\053\uffae" +
    "\054\uffae\055\uffae\057\uffae\060\uffae\061\uffae\062\uffae\001" +
    "\002\000\012\010\ufff1\054\ufff1\055\ufff1\057\ufff1\001\002" +
    "\000\004\006\103\001\002\000\004\012\104\001\002\000" +
    "\072\010\uff9d\011\uff9d\013\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\001\002\000\012\010\uffed\054\uffed" +
    "\055\uffed\057\uffed\001\002\000\012\010\uffef\054\uffef\055" +
    "\uffef\057\uffef\001\002\000\012\010\ufff3\054\ufff3\055\ufff3" +
    "\057\ufff3\001\002\000\012\010\uffeb\054\uffeb\055\uffeb\057" +
    "\uffeb\001\002\000\012\010\uffec\054\uffec\055\uffec\057\uffec" +
    "\001\002\000\004\006\113\001\002\000\004\012\114\001" +
    "\002\000\072\010\uff9e\011\uff9e\013\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\053\uff9e\054\uff9e\055\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002\000\010\011\uff68" +
    "\012\uff68\013\uff68\001\002\000\010\011\121\012\uff5e\013" +
    "\117\001\002\000\004\015\123\001\002\000\004\012\uff67" +
    "\001\002\000\004\013\122\001\002\000\004\015\123\001" +
    "\002\000\012\005\150\013\143\016\141\066\144\001\002" +
    "\000\006\012\uff60\014\uff60\001\002\000\006\012\uff59\014" +
    "\127\001\002\000\004\012\uff5f\001\002\000\006\011\131" +
    "\013\130\001\002\000\004\015\123\001\002\000\004\013" +
    "\132\001\002\000\004\015\123\001\002\000\006\012\uff5b" +
    "\014\uff5b\001\002\000\006\012\uff59\014\127\001\002\000" +
    "\004\012\uff5a\001\002\000\006\012\uff5d\014\uff5d\001\002" +
    "\000\006\012\uff59\014\127\001\002\000\004\012\uff5c\001" +
    "\002\000\014\012\uffd7\014\uffd7\017\162\020\160\021\157" +
    "\001\002\000\010\006\uffd3\012\uffd3\014\uffd3\001\002\000" +
    "\014\012\uffd6\014\uffd6\017\162\020\160\021\157\001\002" +
    "\000\004\005\176\001\002\000\010\006\uffd2\012\uffd2\014" +
    "\uffd2\001\002\000\014\012\uffd5\014\uffd5\017\162\020\160" +
    "\021\157\001\002\000\006\012\uffd4\014\uffd4\001\002\000" +
    "\012\005\150\013\152\016\151\066\144\001\002\000\010" +
    "\017\162\020\160\021\157\001\002\000\010\017\162\020" +
    "\160\021\157\001\002\000\010\017\162\020\160\021\157" +
    "\001\002\000\004\006\155\001\002\000\016\006\uffcf\012" +
    "\uffcf\014\uffcf\017\162\020\160\021\157\001\002\000\010" +
    "\006\uffd0\012\uffd0\014\uffd0\001\002\000\012\005\uffc4\013" +
    "\uffc4\016\uffc4\066\uffc4\001\002\000\012\005\uffc2\013\uffc2" +
    "\016\uffc2\066\uffc2\001\002\000\010\006\uffd1\012\uffd1\014" +
    "\uffd1\001\002\000\012\005\uffc3\013\uffc3\016\uffc3\066\uffc3" +
    "\001\002\000\012\005\150\013\165\016\164\066\144\001" +
    "\002\000\016\006\uffc6\012\uffc6\014\uffc6\017\162\020\160" +
    "\021\157\001\002\000\016\006\uffc7\012\uffc7\014\uffc7\017" +
    "\162\020\160\021\157\001\002\000\010\006\uffc8\012\uffc8" +
    "\014\uffc8\001\002\000\016\006\uffc5\012\uffc5\014\uffc5\017" +
    "\162\020\160\021\157\001\002\000\010\006\uffc9\012\uffc9" +
    "\014\uffc9\001\002\000\010\006\uffcb\012\uffcb\014\uffcb\001" +
    "\002\000\010\006\uffca\012\uffca\014\uffca\001\002\000\010" +
    "\006\uffcc\012\uffcc\014\uffcc\001\002\000\010\006\uffce\012" +
    "\uffce\014\uffce\001\002\000\010\006\uffcd\012\uffcd\014\uffcd" +
    "\001\002\000\006\006\200\016\177\001\002\000\004\014" +
    "\201\001\002\000\022\006\uffbe\012\uffbe\014\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\047\uffbe\056\uffbe\001\002\000\004\016" +
    "\202\001\002\000\004\006\203\001\002\000\022\006\uffbf" +
    "\012\uffbf\014\uffbf\017\uffbf\020\uffbf\021\uffbf\047\uffbf\056" +
    "\uffbf\001\002\000\004\012\205\001\002\000\016\005\uff3b" +
    "\013\217\016\211\046\206\064\214\066\144\001\002\000" +
    "\006\006\uff80\012\uff80\001\002\000\004\047\220\001\002" +
    "\000\006\006\uff85\012\uff85\001\002\000\004\047\220\001" +
    "\002\000\006\006\uff86\012\uff86\001\002\000\004\005\263" +
    "\001\002\000\004\005\uff3c\001\002\000\004\012\227\001" +
    "\002\000\010\006\uff84\012\uff84\050\225\001\002\000\004" +
    "\047\220\001\002\000\010\013\223\016\222\066\144\001" +
    "\002\000\006\006\uff83\012\uff83\001\002\000\006\006\uff7e" +
    "\012\uff7e\001\002\000\006\006\uff7f\012\uff7f\001\002\000" +
    "\006\006\uff7d\012\uff7d\001\002\000\006\005\uff3b\064\214" +
    "\001\002\000\006\006\uff7b\012\uff7b\001\002\000\006\006" +
    "\uff66\013\uff66\001\002\000\006\006\uff54\013\232\001\002" +
    "\000\004\006\uff65\001\002\000\006\017\234\020\233\001" +
    "\002\000\004\020\252\001\002\000\004\017\235\001\002" +
    "\000\006\006\uff58\014\uff58\001\002\000\006\006\uff4f\014" +
    "\240\001\002\000\004\006\uff57\001\002\000\004\013\241" +
    "\001\002\000\006\017\243\020\242\001\002\000\004\020" +
    "\247\001\002\000\004\017\244\001\002\000\006\006\uff53" +
    "\014\uff53\001\002\000\006\006\uff4f\014\240\001\002\000" +
    "\004\006\uff52\001\002\000\006\006\uff51\014\uff51\001\002" +
    "\000\006\006\uff4f\014\240\001\002\000\004\006\uff50\001" +
    "\002\000\006\006\uff56\014\uff56\001\002\000\006\006\uff4f" +
    "\014\240\001\002\000\004\006\uff55\001\002\000\004\006" +
    "\256\001\002\000\004\007\257\001\002\000\064\010\uff64" +
    "\011\uff64\013\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026" +
    "\uff64\027\uff64\030\uff64\031\uff64\032\uff64\034\uff64\035\uff64" +
    "\036\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045" +
    "\uff64\053\uff64\060\uff64\061\uff64\062\uff64\001\002\000\064" +
    "\010\uffe3\011\052\013\040\022\037\023\036\024\027\025" +
    "\053\026\044\027\050\030\017\031\055\032\045\034\075" +
    "\035\063\036\047\040\015\041\062\042\043\043\065\044" +
    "\073\045\022\053\042\060\064\061\060\062\013\001\002" +
    "\000\004\010\262\001\002\000\072\010\uff63\011\uff63\013" +
    "\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63" +
    "\030\uff63\031\uff63\032\uff63\034\uff63\035\uff63\036\uff63\040" +
    "\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\053\uff63" +
    "\054\uff63\055\uff63\057\uff63\060\uff63\061\uff63\062\uff63\001" +
    "\002\000\012\013\217\016\211\046\206\066\144\001\002" +
    "\000\004\006\265\001\002\000\010\006\uff7c\012\uff7c\050" +
    "\uff7c\001\002\000\006\006\uff82\012\uff82\001\002\000\006" +
    "\006\uff81\012\uff81\001\002\000\006\012\uff62\014\uff62\001" +
    "\002\000\006\012\uff59\014\127\001\002\000\004\012\uff61" +
    "\001\002\000\004\013\274\001\002\000\004\006\275\001" +
    "\002\000\004\012\276\001\002\000\072\010\uffad\011\uffad" +
    "\013\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\036\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\053" +
    "\uffad\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\001\002\000\004\006\300\001\002\000\004\012\301\001" +
    "\002\000\072\010\uffa0\011\uffa0\013\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\053\uffa0\054\uffa0\055\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\001\002\000\012\010\uffee" +
    "\054\uffee\055\uffee\057\uffee\001\002\000\064\010\uff4e\011" +
    "\uff4e\013\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e" +
    "\027\uff4e\030\uff4e\031\uff4e\032\uff4e\034\uff4e\035\uff4e\036" +
    "\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e" +
    "\053\uff4e\060\uff4e\061\uff4e\062\uff4e\001\002\000\064\010" +
    "\uffe3\011\052\013\040\022\037\023\036\024\027\025\053" +
    "\026\044\027\050\030\017\031\055\032\045\034\075\035" +
    "\063\036\047\040\015\041\062\042\043\043\065\044\073" +
    "\045\022\053\042\060\064\061\060\062\013\001\002\000" +
    "\004\010\306\001\002\000\004\063\307\001\002\000\004" +
    "\005\310\001\002\000\016\005\uff3b\013\217\016\211\046" +
    "\206\064\214\066\144\001\002\000\004\006\312\001\002" +
    "\000\004\012\313\001\002\000\072\010\uff4d\011\uff4d\013" +
    "\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d" +
    "\030\uff4d\031\uff4d\032\uff4d\034\uff4d\035\uff4d\036\uff4d\040" +
    "\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045\uff4d\053\uff4d" +
    "\054\uff4d\055\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d\001" +
    "\002\000\012\010\ufffa\054\ufffa\055\ufffa\057\ufffa\001\002" +
    "\000\012\010\ufff8\054\ufff8\055\ufff8\057\ufff8\001\002\000" +
    "\004\006\317\001\002\000\004\012\320\001\002\000\072" +
    "\010\uffb2\011\uffb2\013\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\001\002\000\012\010\uffea\054\uffea\055" +
    "\uffea\057\uffea\001\002\000\014\005\150\006\uffb9\013\327" +
    "\016\326\066\144\001\002\000\012\006\uffbb\017\162\020" +
    "\160\021\157\001\002\000\004\006\uffba\001\002\000\004" +
    "\006\330\001\002\000\012\006\uffbc\017\162\020\160\021" +
    "\157\001\002\000\012\006\uffbd\017\162\020\160\021\157" +
    "\001\002\000\004\012\331\001\002\000\072\010\uffb6\011" +
    "\uffb6\013\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\001\002\000\010\012\uffe1\014\uffdf\015\123\001\002" +
    "\000\004\012\334\001\002\000\072\010\uffe2\011\uffe2\013" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\001" +
    "\002\000\004\014\337\001\002\000\004\012\uffe0\001\002" +
    "\000\004\013\341\001\002\000\004\012\uffde\001\002\000" +
    "\010\012\uffd8\014\uffdd\015\123\001\002\000\004\014\337" +
    "\001\002\000\006\012\uffd9\014\uffdb\001\002\000\004\014" +
    "\337\001\002\000\004\012\uffda\001\002\000\004\012\uffdc" +
    "\001\002\000\012\010\ufff7\054\ufff7\055\ufff7\057\ufff7\001" +
    "\002\000\004\006\351\001\002\000\004\012\352\001\002" +
    "\000\072\010\uffb4\011\uffb4\013\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\001\002\000\006\013\uffac\037" +
    "\uffac\001\002\000\006\013\355\037\357\001\002\000\006" +
    "\006\uffaa\017\uffaa\001\002\000\004\006\371\001\002\000" +
    "\006\006\uffa8\017\uffa8\001\002\000\006\006\uffa2\017\361" +
    "\001\002\000\006\013\363\037\364\001\002\000\004\006" +
    "\uffa7\001\002\000\006\006\uffa6\017\uffa6\001\002\000\006" +
    "\006\uffa4\017\uffa4\001\002\000\006\006\uffa2\017\361\001" +
    "\002\000\004\006\uffa3\001\002\000\006\006\uffa2\017\361" +
    "\001\002\000\004\006\uffa5\001\002\000\004\012\372\001" +
    "\002\000\072\010\uffab\011\uffab\013\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\034\uffab\035\uffab\036\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\053\uffab\054\uffab\055\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\001\002\000\006\006\uffa2" +
    "\017\361\001\002\000\004\006\uffa9\001\002\000\012\010" +
    "\uffe8\054\uffe8\055\uffe8\057\uffe8\001\002\000\006\006\uffaf" +
    "\033\377\001\002\000\004\006\uffb0\001\002\000\004\006" +
    "\u0101\001\002\000\004\012\u0102\001\002\000\072\010\uffb1" +
    "\011\uffb1\013\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\001\002\000\004\006\u0104\001\002\000\004\012" +
    "\u0105\001\002\000\072\010\uffb5\011\uffb5\013\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\045\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\004" +
    "\006\u0107\001\002\000\004\012\u0108\001\002\000\072\010" +
    "\uff9f\011\uff9f\013\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\053\uff9f\054\uff9f\055\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\001\002\000\004\013\u010a\001\002\000\004" +
    "\006\u010b\001\002\000\004\007\u010c\001\002\000\006\054" +
    "\u010d\057\uff71\001\002\000\010\016\uff6d\047\u0118\066\uff6d" +
    "\001\002\000\004\057\u010f\001\002\000\004\056\u0112\001" +
    "\002\000\004\010\u0111\001\002\000\072\010\uff74\011\uff74" +
    "\013\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027" +
    "\uff74\030\uff74\031\uff74\032\uff74\034\uff74\035\uff74\036\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\053" +
    "\uff74\054\uff74\055\uff74\057\uff74\060\uff74\061\uff74\062\uff74" +
    "\001\002\000\066\010\uff6c\011\uff6c\013\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\034\uff6c\035\uff6c\036\uff6c\040\uff6c\041\uff6c\042" +
    "\uff6c\043\uff6c\044\uff6c\045\uff6c\053\uff6c\055\uff6c\060\uff6c" +
    "\061\uff6c\062\uff6c\001\002\000\066\010\uffe3\011\052\013" +
    "\040\022\037\023\036\024\027\025\053\026\044\027\050" +
    "\030\017\031\055\032\045\034\075\035\063\036\047\040" +
    "\015\041\062\042\043\043\065\044\073\045\022\053\042" +
    "\055\uffe3\060\064\061\060\062\013\001\002\000\006\010" +
    "\uff69\055\u0115\001\002\000\004\012\u0117\001\002\000\004" +
    "\010\uff6b\001\002\000\010\010\uff6a\054\uff6a\057\uff6a\001" +
    "\002\000\006\016\uff6e\066\uff6e\001\002\000\004\056\u011d" +
    "\001\002\000\006\016\u011b\066\144\001\002\000\004\056" +
    "\uff70\001\002\000\004\056\uff6f\001\002\000\070\011\uff73" +
    "\013\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027" +
    "\uff73\030\uff73\031\uff73\032\uff73\034\uff73\035\uff73\036\uff73" +
    "\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\053" +
    "\uff73\054\uff73\055\uff73\057\uff73\060\uff73\061\uff73\062\uff73" +
    "\001\002\000\070\011\052\013\040\022\037\023\036\024" +
    "\027\025\053\026\044\027\050\030\017\031\055\032\045" +
    "\034\075\035\063\036\047\040\015\041\062\042\043\043" +
    "\065\044\073\045\022\053\042\054\uffe3\055\uffe3\057\uffe3" +
    "\060\064\061\060\062\013\001\002\000\010\054\uff69\055" +
    "\u0115\057\uff69\001\002\000\006\054\u010d\057\uff71\001\002" +
    "\000\004\057\uff72\001\002\000\012\010\uffe4\054\uffe4\055" +
    "\uffe4\057\uffe4\001\002\000\004\020\u0147\001\002\000\004" +
    "\012\u0146\001\002\000\004\017\u0144\001\002\000\014\005" +
    "\uff9c\006\uff9c\013\uff9c\016\uff9c\066\uff9c\001\002\000\014" +
    "\005\150\006\uff92\013\u012c\016\u012a\066\144\001\002\000" +
    "\014\006\uff96\014\uff96\017\162\020\160\021\157\001\002" +
    "\000\006\006\uff94\014\uff94\001\002\000\014\006\uff9a\014" +
    "\uff9a\017\162\020\160\021\157\001\002\000\004\006\u013c" +
    "\001\002\000\014\006\uff98\014\uff98\017\162\020\160\021" +
    "\157\001\002\000\006\006\uff89\014\u012e\001\002\000\012" +
    "\005\150\013\u0131\016\u0130\066\144\001\002\000\004\006" +
    "\uff97\001\002\000\014\006\uff91\014\uff91\017\162\020\160" +
    "\021\157\001\002\000\014\006\uff8f\014\uff8f\017\162\020" +
    "\160\021\157\001\002\000\014\006\uff8d\014\uff8d\017\162" +
    "\020\160\021\157\001\002\000\006\006\uff8b\014\uff8b\001" +
    "\002\000\006\006\uff89\014\u012e\001\002\000\004\006\uff8a" +
    "\001\002\000\006\006\uff89\014\u012e\001\002\000\004\006" +
    "\uff8c\001\002\000\006\006\uff89\014\u012e\001\002\000\004" +
    "\006\uff8e\001\002\000\006\006\uff89\014\u012e\001\002\000" +
    "\004\006\uff90\001\002\000\004\012\u013d\001\002\000\072" +
    "\010\uff9b\011\uff9b\013\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\053\uff9b\054\uff9b\055\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\001\002\000\006\006\uff89\014\u012e\001" +
    "\002\000\004\006\uff99\001\002\000\006\006\uff89\014\u012e" +
    "\001\002\000\004\006\uff93\001\002\000\006\006\uff89\014" +
    "\u012e\001\002\000\004\006\uff95\001\002\000\004\012\u0145" +
    "\001\002\000\072\010\uff4a\011\uff4a\013\uff4a\022\uff4a\023" +
    "\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a" +
    "\032\uff4a\034\uff4a\035\uff4a\036\uff4a\040\uff4a\041\uff4a\042" +
    "\uff4a\043\uff4a\044\uff4a\045\uff4a\053\uff4a\054\uff4a\055\uff4a" +
    "\057\uff4a\060\uff4a\061\uff4a\062\uff4a\001\002\000\072\010" +
    "\uffc1\011\uffc1\013\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\001\002\000\004\012\u0148\001\002\000\072" +
    "\010\uff49\011\uff49\013\uff49\022\uff49\023\uff49\024\uff49\025" +
    "\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49\034\uff49" +
    "\035\uff49\036\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044" +
    "\uff49\045\uff49\053\uff49\054\uff49\055\uff49\057\uff49\060\uff49" +
    "\061\uff49\062\uff49\001\002\000\014\005\150\006\uffb9\013" +
    "\327\016\326\066\144\001\002\000\004\006\u014b\001\002" +
    "\000\004\012\u014c\001\002\000\072\010\uffc0\011\uffc0\013" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\001" +
    "\002\000\014\005\150\006\uffb9\013\327\016\326\066\144" +
    "\001\002\000\004\006\u014f\001\002\000\004\012\u0150\001" +
    "\002\000\072\010\uffb8\011\uffb8\013\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\053\uffb8\054\uffb8\055\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\001\002\000\012\010\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\001\002\000\012\010\ufff9\054" +
    "\ufff9\055\ufff9\057\ufff9\001\002\000\012\010\uffe7\054\uffe7" +
    "\055\uffe7\057\uffe7\001\002\000\012\010\ufffc\054\ufffc\055" +
    "\ufffc\057\ufffc\001\002\000\012\010\uffe9\054\uffe9\055\uffe9" +
    "\057\uffe9\001\002\000\012\010\ufff6\054\ufff6\055\ufff6\057" +
    "\ufff6\001\002\000\014\005\150\006\uffb9\013\327\016\326" +
    "\066\144\001\002\000\004\006\u0159\001\002\000\004\012" +
    "\u015a\001\002\000\072\010\uffb7\011\uffb7\013\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\012" +
    "\010\ufff2\054\ufff2\055\ufff2\057\ufff2\001\002\000\012\010" +
    "\ufff4\054\ufff4\055\ufff4\057\ufff4\001\002\000\012\010\ufff0" +
    "\054\ufff0\055\ufff0\057\ufff0\001\002\000\012\010\ufffd\054" +
    "\ufffd\055\ufffd\057\ufffd\001\002\000\016\005\uff3b\013\217" +
    "\016\211\046\206\064\214\066\144\001\002\000\004\006" +
    "\u0161\001\002\000\004\007\u0162\001\002\000\064\010\uff88" +
    "\011\uff88\013\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\034\uff88\035\uff88" +
    "\036\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\053\uff88\060\uff88\061\uff88\062\uff88\001\002\000\064" +
    "\010\uffe3\011\052\013\040\022\037\023\036\024\027\025" +
    "\053\026\044\027\050\030\017\031\055\032\045\034\075" +
    "\035\063\036\047\040\015\041\062\042\043\043\065\044" +
    "\073\045\022\053\042\060\064\061\060\062\013\001\002" +
    "\000\004\010\u0165\001\002\000\076\010\uff75\011\uff75\013" +
    "\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75" +
    "\030\uff75\031\uff75\032\uff75\034\uff75\035\uff75\036\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\051\u0169" +
    "\052\u0168\053\uff75\054\uff75\055\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\001\002\000\072\010\uff87\011\uff87\013\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\034\uff87\035\uff87\036\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\053\uff87\054" +
    "\uff87\055\uff87\057\uff87\060\uff87\061\uff87\062\uff87\001\002" +
    "\000\072\010\uff78\011\uff78\013\uff78\022\uff78\023\uff78\024" +
    "\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\034\uff78\035\uff78\036\uff78\040\uff78\041\uff78\042\uff78\043" +
    "\uff78\044\uff78\045\uff78\053\uff78\054\uff78\055\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\001\002\000\004\007\u0172\001" +
    "\002\000\004\005\u016a\001\002\000\016\005\uff3b\013\217" +
    "\016\211\046\206\064\214\066\144\001\002\000\004\006" +
    "\u016c\001\002\000\004\007\u016d\001\002\000\064\010\uff7a" +
    "\011\uff7a\013\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\053\uff7a\060\uff7a\061\uff7a\062\uff7a\001\002\000\064" +
    "\010\uffe3\011\052\013\040\022\037\023\036\024\027\025" +
    "\053\026\044\027\050\030\017\031\055\032\045\034\075" +
    "\035\063\036\047\040\015\041\062\042\043\043\065\044" +
    "\073\045\022\053\042\060\064\061\060\062\013\001\002" +
    "\000\004\010\u0170\001\002\000\076\010\uff75\011\uff75\013" +
    "\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75" +
    "\030\uff75\031\uff75\032\uff75\034\uff75\035\uff75\036\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\051\u0169" +
    "\052\u0168\053\uff75\054\uff75\055\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\001\002\000\072\010\uff79\011\uff79\013\uff79" +
    "\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030" +
    "\uff79\031\uff79\032\uff79\034\uff79\035\uff79\036\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\053\uff79\054" +
    "\uff79\055\uff79\057\uff79\060\uff79\061\uff79\062\uff79\001\002" +
    "\000\064\010\uff77\011\uff77\013\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77" +
    "\034\uff77\035\uff77\036\uff77\040\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\053\uff77\060\uff77\061\uff77\062\uff77" +
    "\001\002\000\064\010\uffe3\011\052\013\040\022\037\023" +
    "\036\024\027\025\053\026\044\027\050\030\017\031\055" +
    "\032\045\034\075\035\063\036\047\040\015\041\062\042" +
    "\043\043\065\044\073\045\022\053\042\060\064\061\060" +
    "\062\013\001\002\000\004\010\u0175\001\002\000\072\010" +
    "\uff76\011\uff76\013\uff76\022\uff76\023\uff76\024\uff76\025\uff76" +
    "\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\034\uff76\035" +
    "\uff76\036\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76" +
    "\045\uff76\053\uff76\054\uff76\055\uff76\057\uff76\060\uff76\061" +
    "\uff76\062\uff76\001\002\000\004\010\u0177\001\002\000\006" +
    "\002\uff43\013\u0178\001\002\000\004\005\u017a\001\002\000" +
    "\004\002\ufffe\001\002\000\006\006\uff48\011\uff48\001\002" +
    "\000\006\006\uff40\011\u017d\001\002\000\004\006\uff47\001" +
    "\002\000\004\013\u017e\001\002\000\006\006\uff42\014\uff42" +
    "\001\002\000\006\006\uff3d\014\u0180\001\002\000\004\011" +
    "\u0182\001\002\000\004\006\uff41\001\002\000\004\013\u0183" +
    "\001\002\000\006\006\uff3f\014\uff3f\001\002\000\006\006" +
    "\uff3d\014\u0180\001\002\000\004\006\uff3e\001\002\000\004" +
    "\006\u0187\001\002\000\004\007\u0188\001\002\000\064\010" +
    "\uff46\011\uff46\013\uff46\022\uff46\023\uff46\024\uff46\025\uff46" +
    "\026\uff46\027\uff46\030\uff46\031\uff46\032\uff46\034\uff46\035" +
    "\uff46\036\uff46\040\uff46\041\uff46\042\uff46\043\uff46\044\uff46" +
    "\045\uff46\053\uff46\060\uff46\061\uff46\062\uff46\001\002\000" +
    "\064\010\uffe3\011\052\013\040\022\037\023\036\024\027" +
    "\025\053\026\044\027\050\030\017\031\055\032\045\034" +
    "\075\035\063\036\047\040\015\041\062\042\043\043\065" +
    "\044\073\045\022\053\042\060\064\061\060\062\013\001" +
    "\002\000\004\010\u018b\001\002\000\006\002\uff45\013\uff45" +
    "\001\002\000\006\002\uff43\013\u0178\001\002\000\004\002" +
    "\uff44\001\002\000\012\010\uffe5\054\uffe5\055\uffe5\057\uffe5" +
    "\001\002\000\004\006\u0190\001\002\000\004\012\u0191\001" +
    "\002\000\072\010\uffb3\011\uffb3\013\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\053\uffb3\054\uffb3\055\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000\012\010\uffe6" +
    "\054\uffe6\055\uffe6\057\uffe6\001\002\000\004\006\u0194\001" +
    "\002\000\004\012\u0195\001\002\000\072\010\uffa1\011\uffa1" +
    "\013\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\001\002\000\012\010\ufff5\054\ufff5\055\ufff5\057\ufff5\001" +
    "\002\000\016\005\uff3b\013\217\016\211\046\206\064\214" +
    "\066\144\001\002\000\004\006\u0199\001\002\000\004\007" +
    "\u019a\001\002\000\064\010\uff4c\011\uff4c\013\uff4c\022\uff4c" +
    "\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\034\uff4c\035\uff4c\036\uff4c\040\uff4c\041\uff4c" +
    "\042\uff4c\043\uff4c\044\uff4c\045\uff4c\053\uff4c\060\uff4c\061" +
    "\uff4c\062\uff4c\001\002\000\064\010\uffe3\011\052\013\040" +
    "\022\037\023\036\024\027\025\053\026\044\027\050\030" +
    "\017\031\055\032\045\034\075\035\063\036\047\040\015" +
    "\041\062\042\043\043\065\044\073\045\022\053\042\060" +
    "\064\061\060\062\013\001\002\000\004\010\u019d\001\002" +
    "\000\072\010\uff4b\011\uff4b\013\uff4b\022\uff4b\023\uff4b\024" +
    "\uff4b\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b" +
    "\034\uff4b\035\uff4b\036\uff4b\040\uff4b\041\uff4b\042\uff4b\043" +
    "\uff4b\044\uff4b\045\uff4b\053\uff4b\054\uff4b\055\uff4b\057\uff4b" +
    "\060\uff4b\061\uff4b\062\uff4b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\006\002\004\102\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\020\004" +
    "\022\014\031\015\034\017\056\020\033\021\055\022\050" +
    "\023\027\024\013\025\024\026\067\030\025\031\073\032" +
    "\023\035\070\036\060\037\071\040\065\041\066\042\017" +
    "\045\053\055\030\060\045\065\032\066\015\101\040\001" +
    "\001\000\002\001\001\000\070\003\u0195\004\022\014\031" +
    "\015\034\017\056\020\033\021\055\022\050\023\027\024" +
    "\013\025\024\026\067\030\025\031\073\032\023\035\070" +
    "\036\060\037\071\040\065\041\066\042\017\045\053\055" +
    "\030\060\045\065\032\066\015\101\040\001\001\000\002" +
    "\001\001\000\070\003\u0191\004\022\014\031\015\034\017" +
    "\056\020\033\021\055\022\050\023\027\024\013\025\024" +
    "\026\067\030\025\031\073\032\023\035\070\036\060\037" +
    "\071\040\065\041\066\042\017\045\053\055\030\060\045" +
    "\065\032\066\015\101\040\001\001\000\002\001\001\000" +
    "\070\003\u018d\004\022\014\031\015\034\017\056\020\033" +
    "\021\055\022\050\023\027\024\013\025\024\026\067\030" +
    "\025\031\073\032\023\035\070\036\060\037\071\040\065" +
    "\041\066\042\017\045\053\055\030\060\045\065\032\066" +
    "\015\101\040\001\001\000\004\103\u0175\001\001\000\002" +
    "\001\001\000\070\003\u015d\004\022\014\031\015\034\017" +
    "\056\020\033\021\055\022\050\023\027\024\013\025\024" +
    "\026\067\030\025\031\073\032\023\035\070\036\060\037" +
    "\071\040\065\041\066\042\017\045\053\055\030\060\045" +
    "\065\032\066\015\101\040\001\001\000\070\003\u015c\004" +
    "\022\014\031\015\034\017\056\020\033\021\055\022\050" +
    "\023\027\024\013\025\024\026\067\030\025\031\073\032" +
    "\023\035\070\036\060\037\071\040\065\041\066\042\017" +
    "\045\053\055\030\060\045\065\032\066\015\101\040\001" +
    "\001\000\070\003\u015b\004\022\014\031\015\034\017\056" +
    "\020\033\021\055\022\050\023\027\024\013\025\024\026" +
    "\067\030\025\031\073\032\023\035\070\036\060\037\071" +
    "\040\065\041\066\042\017\045\053\055\030\060\045\065" +
    "\032\066\015\101\040\001\001\000\070\003\u015a\004\022" +
    "\014\031\015\034\017\056\020\033\021\055\022\050\023" +
    "\027\024\013\025\024\026\067\030\025\031\073\032\023" +
    "\035\070\036\060\037\071\040\065\041\066\042\017\045" +
    "\053\055\030\060\045\065\032\066\015\101\040\001\001" +
    "\000\002\001\001\000\070\003\u0155\004\022\014\031\015" +
    "\034\017\056\020\033\021\055\022\050\023\027\024\013" +
    "\025\024\026\067\030\025\031\073\032\023\035\070\036" +
    "\060\037\071\040\065\041\066\042\017\045\053\055\030" +
    "\060\045\065\032\066\015\101\040\001\001\000\070\003" +
    "\u0154\004\022\014\031\015\034\017\056\020\033\021\055" +
    "\022\050\023\027\024\013\025\024\026\067\030\025\031" +
    "\073\032\023\035\070\036\060\037\071\040\065\041\066" +
    "\042\017\045\053\055\030\060\045\065\032\066\015\101" +
    "\040\001\001\000\070\003\u0153\004\022\014\031\015\034" +
    "\017\056\020\033\021\055\022\050\023\027\024\013\025" +
    "\024\026\067\030\025\031\073\032\023\035\070\036\060" +
    "\037\071\040\065\041\066\042\017\045\053\055\030\060" +
    "\045\065\032\066\015\101\040\001\001\000\070\003\u0152" +
    "\004\022\014\031\015\034\017\056\020\033\021\055\022" +
    "\050\023\027\024\013\025\024\026\067\030\025\031\073" +
    "\032\023\035\070\036\060\037\071\040\065\041\066\042" +
    "\017\045\053\055\030\060\045\065\032\066\015\101\040" +
    "\001\001\000\070\003\u0151\004\022\014\031\015\034\017" +
    "\056\020\033\021\055\022\050\023\027\024\013\025\024" +
    "\026\067\030\025\031\073\032\023\035\070\036\060\037" +
    "\071\040\065\041\066\042\017\045\053\055\030\060\045" +
    "\065\032\066\015\101\040\001\001\000\070\003\u0150\004" +
    "\022\014\031\015\034\017\056\020\033\021\055\022\050" +
    "\023\027\024\013\025\024\026\067\030\025\031\073\032" +
    "\023\035\070\036\060\037\071\040\065\041\066\042\017" +
    "\045\053\055\030\060\045\065\032\066\015\101\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u0123" +
    "\001\001\000\070\003\u0121\004\022\014\031\015\034\017" +
    "\056\020\033\021\055\022\050\023\027\024\013\025\024" +
    "\026\067\030\025\031\073\032\023\035\070\036\060\037" +
    "\071\040\065\041\066\042\017\045\053\055\030\060\045" +
    "\065\032\066\015\101\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\374\004\022\014\031\015\034\017\056\020\033\021" +
    "\055\022\050\023\027\024\013\025\024\026\067\030\025" +
    "\031\073\032\023\035\070\036\060\037\071\040\065\041" +
    "\066\042\017\045\053\055\030\060\045\065\032\066\015" +
    "\101\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\346\004\022\014\031\015\034\017\056\020\033" +
    "\021\055\022\050\023\027\024\013\025\024\026\067\030" +
    "\025\031\073\032\023\035\070\036\060\037\071\040\065" +
    "\041\066\042\017\045\053\055\030\060\045\065\032\066" +
    "\015\101\040\001\001\000\004\005\332\001\001\000\002" +
    "\001\001\000\070\003\320\004\022\014\031\015\034\017" +
    "\056\020\033\021\055\022\050\023\027\024\013\025\024" +
    "\026\067\030\025\031\073\032\023\035\070\036\060\037" +
    "\071\040\065\041\066\042\017\045\053\055\030\060\045" +
    "\065\032\066\015\101\040\001\001\000\002\001\001\000" +
    "\070\003\314\004\022\014\031\015\034\017\056\020\033" +
    "\021\055\022\050\023\027\024\013\025\024\026\067\030" +
    "\025\031\073\032\023\035\070\036\060\037\071\040\065" +
    "\041\066\042\017\045\053\055\030\060\045\065\032\066" +
    "\015\101\040\001\001\000\070\003\313\004\022\014\031" +
    "\015\034\017\056\020\033\021\055\022\050\023\027\024" +
    "\013\025\024\026\067\030\025\031\073\032\023\035\070" +
    "\036\060\037\071\040\065\041\066\042\017\045\053\055" +
    "\030\060\045\065\032\066\015\101\040\001\001\000\002" +
    "\001\001\000\070\003\301\004\022\014\031\015\034\017" +
    "\056\020\033\021\055\022\050\023\027\024\013\025\024" +
    "\026\067\030\025\031\073\032\023\035\070\036\060\037" +
    "\071\040\065\041\066\042\017\045\053\055\030\060\045" +
    "\065\032\066\015\101\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\110\004\022\014\031\015\034\017\056\020\033\021" +
    "\055\022\050\023\027\024\013\025\024\026\067\030\025" +
    "\031\073\032\023\035\070\036\060\037\071\040\065\041" +
    "\066\042\017\045\053\055\030\060\045\065\032\066\015" +
    "\101\040\001\001\000\070\003\107\004\022\014\031\015" +
    "\034\017\056\020\033\021\055\022\050\023\027\024\013" +
    "\025\024\026\067\030\025\031\073\032\023\035\070\036" +
    "\060\037\071\040\065\041\066\042\017\045\053\055\030" +
    "\060\045\065\032\066\015\101\040\001\001\000\070\003" +
    "\106\004\022\014\031\015\034\017\056\020\033\021\055" +
    "\022\050\023\027\024\013\025\024\026\067\030\025\031" +
    "\073\032\023\035\070\036\060\037\071\040\065\041\066" +
    "\042\017\045\053\055\030\060\045\065\032\066\015\101" +
    "\040\001\001\000\070\003\105\004\022\014\031\015\034" +
    "\017\056\020\033\021\055\022\050\023\027\024\013\025" +
    "\024\026\067\030\025\031\073\032\023\035\070\036\060" +
    "\037\071\040\065\041\066\042\017\045\053\055\030\060" +
    "\045\065\032\066\015\101\040\001\001\000\070\003\104" +
    "\004\022\014\031\015\034\017\056\020\033\021\055\022" +
    "\050\023\027\024\013\025\024\026\067\030\025\031\073" +
    "\032\023\035\070\036\060\037\071\040\065\041\066\042" +
    "\017\045\053\055\030\060\045\065\032\066\015\101\040" +
    "\001\001\000\002\001\001\000\070\003\100\004\022\014" +
    "\031\015\034\017\056\020\033\021\055\022\050\023\027" +
    "\024\013\025\024\026\067\030\025\031\073\032\023\035" +
    "\070\036\060\037\071\040\065\041\066\042\017\045\053" +
    "\055\030\060\045\065\032\066\015\101\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\132\115\001\001\000\004\061\117\001\001\000\004\007" +
    "\267\001\001\000\004\133\203\001\001\000\002\001\001" +
    "\000\004\007\123\001\001\000\012\010\146\011\141\073" +
    "\144\075\145\001\001\000\004\140\124\001\001\000\004" +
    "\062\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\135\001\001\000\002\001\001\000\004\007\132" +
    "\001\001\000\004\142\133\001\001\000\004\062\134\001" +
    "\001\000\002\001\001\000\004\141\136\001\001\000\004" +
    "\062\137\001\001\000\002\001\001\000\006\012\174\013" +
    "\162\001\001\000\002\001\001\000\006\012\173\013\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\172\013\162\001\001\000\002\001\001\000\012\010\153" +
    "\011\141\073\144\075\152\001\001\000\006\012\174\013" +
    "\162\001\001\000\006\012\173\013\162\001\001\000\006" +
    "\012\172\013\162\001\001\000\002\001\001\000\010\012" +
    "\155\013\162\074\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\073\165\075\166\001\001\000\006\012\171" +
    "\013\162\001\001\000\006\012\170\013\162\001\001\000" +
    "\002\001\001\000\006\012\167\013\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\046\214\047\211\051\215\052\207\072\212\075\206\001" +
    "\001\000\002\001\001\000\004\050\266\001\001\000\002" +
    "\001\001\000\004\050\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\220\001\001\000\004\075\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\225\072\212\001\001\000" +
    "\002\001\001\000\004\134\227\001\001\000\004\063\230" +
    "\001\001\000\004\135\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\143\235\001\001" +
    "\000\004\064\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\145\244\001\001\000\004\064\245\001\001\000" +
    "\002\001\001\000\004\146\247\001\001\000\004\064\250" +
    "\001\001\000\002\001\001\000\004\144\252\001\001\000" +
    "\004\064\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\257\001\001\000\070\003" +
    "\260\004\022\014\031\015\034\017\056\020\033\021\055" +
    "\022\050\023\027\024\013\025\024\026\067\030\025\031" +
    "\073\032\023\035\070\036\060\037\071\040\065\041\066" +
    "\042\017\045\053\055\030\060\045\065\032\066\015\101" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\263\075\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\137\270" +
    "\001\001\000\004\062\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\147\303\001\001\000\070" +
    "\003\304\004\022\014\031\015\034\017\056\020\033\021" +
    "\055\022\050\023\027\024\013\025\024\026\067\030\025" +
    "\031\073\032\023\035\070\036\060\037\071\040\065\041" +
    "\066\042\017\045\053\055\030\060\045\065\032\066\015" +
    "\101\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\046\310\047\211\051\215\052\207" +
    "\072\212\075\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\323\011\141\016\324\073\144" +
    "\075\322\001\001\000\006\012\172\013\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\174\013\162" +
    "\001\001\000\006\012\173\013\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\335\104\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\342\105\341\001\001\000\004\006\345\001" +
    "\001\000\004\106\343\001\001\000\004\006\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\353\001\001\000\004\033\355\001\001\000\004\110" +
    "\372\001\001\000\002\001\001\000\004\111\357\001\001" +
    "\000\004\034\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\112\366\001\001\000\004\113\364\001\001" +
    "\000\004\034\365\001\001\000\002\001\001\000\004\034" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u010d" +
    "\001\001\000\006\076\u0118\077\u0119\001\001\000\004\057" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u0112\001\001\000\070\003\u0113\004" +
    "\022\014\031\015\034\017\056\020\033\021\055\022\050" +
    "\023\027\024\013\025\024\026\067\030\025\031\073\032" +
    "\023\035\070\036\060\037\071\040\065\041\066\042\017" +
    "\045\053\055\030\060\045\065\032\066\015\101\040\001" +
    "\001\000\004\100\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\130\u011d\001\001\000\070\003\u011e\004" +
    "\022\014\031\015\034\017\056\020\033\021\055\022\050" +
    "\023\027\024\013\025\024\026\067\030\025\031\073\032" +
    "\023\035\070\036\060\037\071\040\065\041\066\042\017" +
    "\045\053\055\030\060\045\065\032\066\015\101\040\001" +
    "\001\000\004\100\u011f\001\001\000\004\056\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\114\u0126\001\001" +
    "\000\014\010\u0128\011\141\043\u012a\073\144\075\u0127\001" +
    "\001\000\010\012\172\013\162\117\u0141\001\001\000\004" +
    "\120\u013f\001\001\000\010\012\174\013\162\115\u013d\001" +
    "\001\000\002\001\001\000\010\012\173\013\162\116\u012c" +
    "\001\001\000\004\044\u012e\001\001\000\012\010\u0132\011" +
    "\141\073\144\075\u0131\001\001\000\002\001\001\000\010" +
    "\012\174\013\162\121\u0139\001\001\000\010\012\173\013" +
    "\162\122\u0137\001\001\000\010\012\172\013\162\123\u0135" +
    "\001\001\000\004\124\u0133\001\001\000\004\044\u0134\001" +
    "\001\000\002\001\001\000\004\044\u0136\001\001\000\002" +
    "\001\001\000\004\044\u0138\001\001\000\002\001\001\000" +
    "\004\044\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u013e\001\001\000\002\001" +
    "\001\000\004\044\u0140\001\001\000\002\001\001\000\004" +
    "\044\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\323\011\141\016\u0149\073\144\075" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\323\011\141\016\u014d\073\144\075" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\323\011\141\016\u0157\073\144\075\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\046\u015f\047\211\051\215\052\207" +
    "\072\212\075\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\125\u0162\001\001\000\070\003\u0163\004\022" +
    "\014\031\015\034\017\056\020\033\021\055\022\050\023" +
    "\027\024\013\025\024\026\067\030\025\031\073\032\023" +
    "\035\070\036\060\037\071\040\065\041\066\042\017\045" +
    "\053\055\030\060\045\065\032\066\015\101\040\001\001" +
    "\000\002\001\001\000\006\053\u0165\054\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\046\u016a\047\211\051\215\052\207\072" +
    "\212\075\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\126\u016d\001\001\000\070\003\u016e\004\022\014" +
    "\031\015\034\017\056\020\033\021\055\022\050\023\027" +
    "\024\013\025\024\026\067\030\025\031\073\032\023\035" +
    "\070\036\060\037\071\040\065\041\066\042\017\045\053" +
    "\055\030\060\045\065\032\066\015\101\040\001\001\000" +
    "\002\001\001\000\006\053\u0170\054\u0166\001\001\000\002" +
    "\001\001\000\004\127\u0172\001\001\000\070\003\u0173\004" +
    "\022\014\031\015\034\017\056\020\033\021\055\022\050" +
    "\023\027\024\013\025\024\026\067\030\025\031\073\032" +
    "\023\035\070\036\060\037\071\040\065\041\066\042\017" +
    "\045\053\055\030\060\045\065\032\066\015\101\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\151\u017a\001\001\000\004\070\u017b\001\001" +
    "\000\004\152\u0185\001\001\000\002\001\001\000\004\155" +
    "\u017e\001\001\000\004\071\u0180\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\156\u0183\001" +
    "\001\000\004\071\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\153\u0188\001\001\000" +
    "\070\003\u0189\004\022\014\031\015\034\017\056\020\033" +
    "\021\055\022\050\023\027\024\013\025\024\026\067\030" +
    "\025\031\073\032\023\035\070\036\060\037\071\040\065" +
    "\041\066\042\017\045\053\055\030\060\045\065\032\066" +
    "\015\101\040\001\001\000\002\001\001\000\004\154\u018b" +
    "\001\001\000\004\067\u018c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\046\u0197" +
    "\047\211\051\215\052\207\072\212\075\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\150\u019a\001\001" +
    "\000\070\003\u019b\004\022\014\031\015\034\017\056\020" +
    "\033\021\055\022\050\023\027\024\013\025\024\026\067" +
    "\030\025\031\073\032\023\035\070\036\060\037\071\040" +
    "\065\041\066\042\017\045\053\055\030\060\045\065\032" +
    "\066\015\101\040\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol simbolo;

	private JSONObject resultadoJSON;

	private Stack pilaDeInstrucciones = new Stack();
	private Stack pilaDePilas = new Stack();

	private ArrayList<JSONObject> instruccionesDelPrograma = new ArrayList<>();

    public JSONObject getResultadoJSON() {
        return resultadoJSON;
    }

    public Symbol getSimbolo(){
        return this.simbolo;
	}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

	/* Inicializa el objeto resultadoJSON que es el resultado completo del análisis */
	 resultadoJSON = new JSONObject();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

	    /* Vacía las instrucciones de BloqueDeInstrucciones */
	    resultadoJSON.put("main",instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= NT$0 PROGRAMA PARENTESISABRE PARENTESISCIERRA LLAVEABRE BloqueDeInstrucciones NT$1 LLAVECIERRA Funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        /* Finaliza resultadoJSON */

         resultadoJSON.put("status",true);
         resultadoJSON.put("message","success");

         /* Vacía las instrucciones de Funciones */
         resultadoJSON.put("functions",instruccionesDelPrograma);
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueDeInstrucciones ::= InstruccionDeclaracionDeVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueDeInstrucciones ::= InstruccionModificacionDeValorDeVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueDeInstrucciones ::= InstruccionAvanzar BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueDeInstrucciones ::= InstruccionEspera BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueDeInstrucciones ::= InstruccionGirarALaIzquierda BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueDeInstrucciones ::= InstruccionGirarALaDerecha BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueDeInstrucciones ::= InstruccionTomarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueDeInstrucciones ::= InstruccionSoltarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueDeInstrucciones ::= InstruccionEliminarObjeto BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueDeInstrucciones ::= InstruccionDesactivarKaboom BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueDeInstrucciones ::= InstruccionPintarSuelo BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueDeInstrucciones ::= InstruccionDejarDePintarSuelo BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BloqueDeInstrucciones ::= InstruccionImprimirVariables BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BloqueDeInstrucciones ::= InstruccionImprimirCadenas BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BloqueDeInstrucciones ::= InstruccionTengoObjetoDelante BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BloqueDeInstrucciones ::= InstruccionTengoBombaDelante BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BloqueDeInstrucciones ::= InstruccionQueTengoDelanteDeMi BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BloqueDeInstrucciones ::= TengoMuroDelanteDeMi BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BloqueDeInstrucciones ::= InstruccionTerminarBloque BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BloqueDeInstrucciones ::= EstrucutraDeControlIf BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BloqueDeInstrucciones ::= EstrucutraDeControlCase BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BloqueDeInstrucciones ::= EstrucutraDeControlFor BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueDeInstrucciones ::= EstrucutraDeControlDoWhile BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BloqueDeInstrucciones ::= EstrucutraDeControlWhile BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BloqueDeInstrucciones ::= LlamadaAFuncion BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BloqueDeInstrucciones ::= inrementosYDecrementos BloqueDeInstrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BloqueDeInstrucciones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDeInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InstruccionDeclaracionDeVariables ::= VARIABLE DeclaracionDeVariables PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDeclaracionDeVariables",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DeclaracionDeVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                .put("type",0)
                .put("value",-1)
                .put("valueFrom","")
                .put("operation",new JSONObject())
                .put("random",new JSONObject())
                .put("instruction","DECLARAVARIABLE")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DeclaracionDeVariables ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    JSONObject JSONTemporal = (JSONObject) objetoJSON;
	    instruccionesDelPrograma.add(
                    new JSONObject()
                        .put("identifier",identificador)
                        .put("type",JSONTemporal.get("type"))
                        .put("value",JSONTemporal.get("value"))
                        .put("valueFrom",JSONTemporal.get("valueFrom"))
                        .put("operation",JSONTemporal.get("operation"))
                        .put("random",JSONTemporal.get("random"))
                        .put("instruction","DECLARAVARIABLE")
                );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$2 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            instruccionesDelPrograma.add(
                new JSONObject()
                    .put("identifier",identificador)
                    .put("type",0)
                    .put("value",-1)
                    .put("valueFrom","")
                    .put("operation",new JSONObject())
                    .put("random",new JSONObject())
                    .put("instruction","DECLARAVARIABLE")
            );
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DeclaracionDeVariables ::= IDENTIFICADOR NT$2 MultiplesDeclaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionDeVariables",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

             instruccionesDelPrograma.add(
                 new JSONObject()
                     .put("identifier",identificador)
                     .put("type",0)
                     .put("value",-1)
                     .put("valueFrom","")
                     .put("operation",new JSONObject())
                     .put("random",new JSONObject())
                     .put("instruction","DECLARAVARIABLE")
             );
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR NT$3 MultiplesDeclaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$4 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        JSONObject JSONTemporal = (JSONObject) objetoJSON;
        instruccionesDelPrograma.add(
                     new JSONObject()
                         .put("identifier",identificador)
                         .put("type",JSONTemporal.get("type"))
                         .put("value",JSONTemporal.get("value"))
                         .put("valueFrom",JSONTemporal.get("valueFrom"))
                         .put("operation",JSONTemporal.get("operation"))
                         .put("random",JSONTemporal.get("random"))
                         .put("instruction","DECLARAVARIABLE")
                 );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$4 MultiplesDeclaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        JSONObject JSONTemporal = (JSONObject) objetoJSON;
        instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                 .put("type",JSONTemporal.get("type"))
                 .put("value",JSONTemporal.get("value"))
                 .put("valueFrom",JSONTemporal.get("valueFrom"))
                 .put("operation",JSONTemporal.get("operation"))
                 .put("random",JSONTemporal.get("random"))
                 .put("instruction","DECLARAVARIABLE")
        );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MultiplesDeclaraciones ::= SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
             instruccionesDelPrograma.add(
                 new JSONObject()
                     .put("identifier",identificador)
                     .put("type",0)
                     .put("value",-1)
                     .put("valueFrom","")
                     .put("operation",new JSONObject())
                     .put("random",new JSONObject())
                     .put("instruction","DECLARAVARIABLE")
             );
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MultiplesDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT = new JSONObject()
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("operation",new JSONObject())
            .put("random",new JSONObject())
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
              .put("type",4)
              .put("value",-1)
              .put("valueFrom",identificador)
              .put("operation",new JSONObject())
              .put("random",new JSONObject())
          ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION NumeroAleatorio 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	     //JSONObject JSONTemporal = (JSONObject) objetoJSON;
         RESULT = new JSONObject()
               .put("type",2)
               .put("value",-1)
               .put("valueFrom","")
               .put("operation",new JSONObject())
               .put("random",(JSONObject) objetoJSON)
           ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AsignacionDeValoresAlDeclararVariable ::= OPERADORASIGNACION OperacionAritmetica 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        //JSONObject JSONTemporal = (JSONObject) objetoJSON;
        RESULT = new JSONObject()
            .put("type",3)
            .put("value",-1)
            .put("valueFrom","")
            .put("operation",(JSONObject) objetoJSON)
            .put("random",new JSONObject())
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignacionDeValoresAlDeclararVariable",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OperacionAritmetica ::= OperacionSinParentesis 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = objetoJSON; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OperacionAritmetica ::= OperacionConParentesis 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = objetoJSON; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OperacionConParentesis ::= PARENTESISABRE OperacionAritmetica PARENTESISCIERRA continuaOperacion 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",true)
            .put("type",0)
            .put("value",-1)
            .put("valueFrom","")
            .put("random",(JSONObject) objetoJSON)
            .put("operation",(JSONObject) operacion)
            .put("operator","")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionConParentesis",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // continuaOperacion ::= ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = objetoJSON; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("continuaOperacion",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // continuaOperacion ::= 
            {
              Object RESULT =null;
		 RESULT = new JSONObject(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("continuaOperacion",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OperacionSinParentesis ::= IDENTIFICADOR ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new JSONObject()
             .put("isBracket",false)
             .put("type",2)
             .put("value",-1)
             .put("valueFrom",identificador)
             .put("random",new JSONObject())
             .put("operation",(JSONObject) objetoJSON)
             .put("operator","")
         ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OperacionSinParentesis ::= NUMERO ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("random",new JSONObject())
            .put("operation",(JSONObject) objetoJSON)
            .put("operator","")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OperacionSinParentesis ::= NumeroAleatorio ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int randomleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int randomright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object random = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",3)
            .put("value",-1)
            .put("valueFrom","")
            .put("random",(JSONObject) random)
            .put("operation",(JSONObject) objetoJSON)
            .put("operator","")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperacionSinParentesis",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos IDENTIFICADOR ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",2)
            .put("value",-1)
            .put("valueFrom",identificador)
            .put("random",new JSONObject())
            .put("operation",(JSONObject) objetoJSON)
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NUMERO ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("random",new JSONObject())
            .put("operation",(JSONObject) objetoJSON)
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NumeroAleatorio ContinuacionOperacionSinParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleatorioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aleatorioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object aleatorio = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",3)
            .put("value",-1)
            .put("valueFrom","")
            .put("random",(JSONObject) aleatorio)
            .put("operation",(JSONObject) objetoJSON)
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos OperacionConParentesis 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new JSONObject()
             .put("isBracket",true)
             .put("type",0)
             .put("value",-1)
             .put("valueFrom","")
             .put("random",new JSONObject())
             .put("operation",(JSONObject) objetoJSON)
             .put("operator",operator)
         ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos IDENTIFICADOR 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",2)
            .put("value",-1)
            .put("valueFrom",identificador)
            .put("random",new JSONObject())
            .put("operation",new JSONObject())
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NUMERO 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("isBracket",false)
            .put("type",1)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom","")
            .put("random",new JSONObject())
            .put("operation",new JSONObject())
            .put("operator",operator)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ContinuacionOperacionSinParentesis ::= OperadoresAritmeticos NumeroAleatorio 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new JSONObject()
             .put("isBracket",false)
             .put("type",3)
             .put("value",-1)
             .put("valueFrom","")
             .put("random",(JSONObject) objetoJSON)
             .put("operation",new JSONObject())
             .put("operator",operator)
         ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionOperacionSinParentesis",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperadoresAritmeticos ::= OPERADORARITMETICO 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= operador; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperadoresAritmeticos ::= OPERADORARITMETICOSUMA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= operador; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadoresAritmeticos ::= OPERADORARITMETICORESTA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= operador; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InstruccionModificacionDeValorDeVariables ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	    instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("valueFrom",(JSONObject) objetoJSON)
                .put("instruction","MODIFICAVARIABLE")
	    );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionModificacionDeValorDeVariables",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InstruccionAvanzar ::= AVANZAR PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","AVANZAR")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionAvanzar",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NumeroAleatorio ::= RANDOM PARENTESISABRE NUMERO SEPARADOR NUMERO PARENTESISCIERRA 
            {
              Object RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object numero1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new JSONObject()
            .put("from",Integer.valueOf((String) numero1))
            .put("to",Integer.valueOf((String) numero2))
            .put("between",true)
            .put("instruction","RANDOM")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumeroAleatorio",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NumeroAleatorio ::= RANDOM PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		
        RESULT = new JSONObject()
            .put("from",-1)
            .put("to",-1)
            .put("between",false)
            .put("instruction","RANDOM")
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumeroAleatorio",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ParametrosDeEntradaDeUnaInstruccion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT = new JSONObject()
            .put("identifier",identificador)
            .put("type",1)
            .put("value",-1)
            .put("valueFrom",new JSONObject())
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ParametrosDeEntradaDeUnaInstruccion ::= NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT = new JSONObject()
            .put("identifier","")
            .put("type",2)
            .put("value",Integer.valueOf((String) numero))
            .put("valueFrom",new JSONObject())
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ParametrosDeEntradaDeUnaInstruccion ::= NumeroAleatorio 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("identifier","")
            .put("type",3)
            .put("value",-1)
            .put("valueFrom",(JSONObject) objetoJSON)
        ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ParametrosDeEntradaDeUnaInstruccion ::= OperacionAritmetica 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new JSONObject()
            .put("identifier","")
            .put("type",4)
            .put("value",-1)
            .put("valueFrom",(JSONObject) objetoJSON)
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ParametrosDeEntradaDeUnaInstruccion ::= 
            {
              Object RESULT =null;
		
        RESULT = new JSONObject()
            .put("identifier","")
            .put("type",0)
            .put("value",-1)
            .put("valueFrom",new JSONObject())
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntradaDeUnaInstruccion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InstruccionEspera ::= ESPERA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
	        new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","ESPERA")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionEspera",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // InstruccionGirarALaIzquierda ::= IZQUIERDA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","IZQUIERDA")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionGirarALaIzquierda",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // InstruccionGirarALaDerecha ::= DERECHA PARENTESISABRE ParametrosDeEntradaDeUnaInstruccion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object parameter = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("parameter",(JSONObject) parameter)
                .put("instruction","DERECHA")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionGirarALaDerecha",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // InstruccionTomarObjeto ::= TOMAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
        instruccionesDelPrograma.add(
                new JSONObject()
                    .put("instruction","TOMAR")
            );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTomarObjeto",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // InstruccionSoltarObjeto ::= SOLTAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
                 new JSONObject()
                     .put("instruction","SOLTAR")
             );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionSoltarObjeto",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // InstruccionEliminarObjeto ::= ELIMINAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
           instruccionesDelPrograma.add(
                   new JSONObject()
                       .put("instruction","ELIMINAR")
               );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionEliminarObjeto",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // InstruccionDesactivarKaboom ::= DESACTIVARKABOOM PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
          instruccionesDelPrograma.add(
                  new JSONObject()
                      .put("instruction","DESACTIVARKABOOM")
              );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDesactivarKaboom",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // InstruccionPintarSuelo ::= PINTAR PARENTESISABRE PaletaDeColores PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","PINTAR")
                .put("color",color)
            );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionPintarSuelo",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PaletaDeColores ::= COLORES 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = color; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PaletaDeColores",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PaletaDeColores ::= 
            {
              Object RESULT =null;
		 RESULT = "DEFAULT"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PaletaDeColores",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // InstruccionDejarDePintarSuelo ::= DEJAPINTAR PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
             new JSONObject()
                 .put("instruction","DEJAPINTAR")
         );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionDejarDePintarSuelo",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // InstruccionImprimirVariables ::= IMPRIMIRVARIABLE PARENTESISABRE IDENTIFICADOR PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
          instruccionesDelPrograma.add(
              new JSONObject()
                  .put("instruction","IMPRIMIRVARIABLE")
                  .put("identifier",identifier)
          );
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionImprimirVariables",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$5 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
        pilaDeInstrucciones = new Stack();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // InstruccionImprimirCadenas ::= IMPRIMIRCADENA PARENTESISABRE NT$5 Cadenas PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        //pilaDeInstrucciones = acomodarPila(pilaDeInstrucciones);
        ArrayList<JSONObject> listaTemporal = new ArrayList<>();
        Stack pilaTemporal = new Stack();
        while(!pilaDeInstrucciones.empty()){
            pilaTemporal.add((JSONObject) pilaDeInstrucciones.pop());
        }
        while(!pilaTemporal.empty()){
            listaTemporal.add((JSONObject) pilaTemporal.pop());
        }
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();

        instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","IMPRIMIRCADENA")
                .put("parameter",listaTemporal)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionImprimirCadenas",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 0)
                .put("string", "")
                .put("valueFrom", identificador)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Cadenas ::= IDENTIFICADOR NT$6 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Cadenas",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$7 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
	        new JSONObject()
	            .put("type", 1)
	            .put("string", (String) cadena)
	            .put("valueFrom", "")
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Cadenas ::= CADENA NT$7 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Cadenas",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$8 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 0)
                .put("string", "")
                .put("valueFrom", identificador)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ContinuacionDeCadenas ::= OPERADORARITMETICOSUMA IDENTIFICADOR NT$8 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$9 ::= 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 1)
                .put("string", (String) cadena)
                .put("valueFrom", "")
        );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ContinuacionDeCadenas ::= OPERADORARITMETICOSUMA CADENA NT$9 ContinuacionDeCadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ContinuacionDeCadenas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ContinuacionDeCadenas",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // InstruccionTengoObjetoDelante ::= OBJETODELANTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
             new JSONObject()
                 .put("instruction","OBJETODELANTE")
         );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTengoObjetoDelante",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InstruccionTengoBombaDelante ::= KABOOMDEFRENTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
          instruccionesDelPrograma.add(
              new JSONObject()
                  .put("instruction","KABOOMDEFRENTE")
          );
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTengoBombaDelante",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InstruccionQueTengoDelanteDeMi ::= QUETENGODELANTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
           instruccionesDelPrograma.add(
               new JSONObject()
                   .put("instruction","QUETENGODELANTE")
           );
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionQueTengoDelanteDeMi",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TengoMuroDelanteDeMi ::= MURODELANTE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
        instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","MURODELANTE")
        );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TengoMuroDelanteDeMi",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InstruccionTerminarBloque ::= TERMINARBLOQUE PARENTESISABRE PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		
         instruccionesDelPrograma.add(
             new JSONObject()
                 .put("instruction","TERMINARBLOQUE")
         );
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionTerminarBloque",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$10 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

        pilaDePilas.add(pilaDeInstrucciones);
        pilaDeInstrucciones = new Stack();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LlamadaAFuncion ::= IDENTIFICADOR PARENTESISABRE NT$10 Parametros PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        //pilaDeInstrucciones = acomodarPila(pilaDeInstrucciones);
        ArrayList<JSONObject> listaTemporal = new ArrayList<>();
        Stack pilaTemporal = new Stack();
        while(!pilaDeInstrucciones.empty()){
            pilaTemporal.add((JSONObject) pilaDeInstrucciones.pop());
        }
        while(!pilaTemporal.empty()){
            listaTemporal.add((JSONObject) pilaTemporal.pop());
        }
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();

        instruccionesDelPrograma.add(
            new JSONObject()
                .put("instruction","LLAMADAAFUNCION")
                .put("parameter",listaTemporal)
                .put("name",nombreFuncion)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamadaAFuncion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$11 ::= 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 1)
                .put("value",Integer.valueOf((String) numero))
                .put("identifier", "")
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Parametros ::= NUMERO NT$11 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$12 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 2)
                .put("value",-1)
                .put("identifier", identificador)
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Parametros ::= IDENTIFICADOR NT$12 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$13 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 3)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Parametros ::= NumeroAleatorio NT$13 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$14 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 4)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Parametros ::= OperacionAritmetica NT$14 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$15 ::= 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 1)
                .put("value",Integer.valueOf((String) numero))
                .put("identifier", "")
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ParametrosContinuacion ::= SEPARADOR NUMERO NT$15 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$16 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 2)
                .put("value",-1)
                .put("identifier", identificador)
                .put("valueFrom", new JSONObject())
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ParametrosContinuacion ::= SEPARADOR IDENTIFICADOR NT$16 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$17 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 3)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ParametrosContinuacion ::= SEPARADOR NumeroAleatorio NT$17 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$18 ::= 
            {
              Object RESULT =null;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    pilaDeInstrucciones.add(
            new JSONObject()
                .put("type", 4)
                .put("value",-1)
                .put("identifier", "")
                .put("valueFrom", (JSONObject) objetoJSON)
        );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ParametrosContinuacion ::= SEPARADOR OperacionAritmetica NT$18 ParametrosContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ParametrosContinuacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosContinuacion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$19 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();

	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EstrucutraDeControlIf ::= SI PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE NT$19 BloqueDeInstrucciones LLAVECIERRA EstrucutraDeControlIfElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int continuacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int continuacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object continuacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
	        .put("subprogram",instruccionesDelPrograma)
	        .put("instruction","SI")
	        .put("continue",(ArrayList<JSONObject>) continuacion)
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIf",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Condicion ::= CondicionDeComparacionSimple 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Condicion ::= CondicionLogica 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Condicion ::= CondicionDeComparacionConParentesis 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = condicion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CondicionDeComparacionSimple ::= IDENTIFICADOR CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier",identificador)
	            .put("type",1)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CondicionDeComparacionSimple ::= NUMERO CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",2)
	            .put("value", Integer.valueOf((String) numero))
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CondicionDeComparacionSimple ::= NumeroAleatorio CondicionDeComparacionSimpleContinuacion 
            {
              Object RESULT =null;
		int aleatorioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aleatorioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object aleatorio = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int compararleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int compararright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object comparar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",3)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) comparar)
	            .put("valueFrom",(JSONObject) aleatorio)
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CondicionDeComparacionSimple ::= BOOLEANO 
            {
              Object RESULT =null;
		int booleanoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int booleanoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object booleano = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",0)
	            .put("value",booleano)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimple",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION IDENTIFICADOR 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier",identificador)
	            .put("type",1)
	            .put("value",-1)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",new JSONObject())
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION NUMERO 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	        RESULT =
                new JSONObject()
                    .put("identifier","")
                    .put("type",2)
                    .put("value",Integer.valueOf((String) numero))
                    .put("operator",(String) operador)
                    .put("valueFrom",new JSONObject())
                    .put("isBracket",false)
            ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CondicionDeComparacionSimpleContinuacion ::= OPERADORDECOMPARACION NumeroAleatorio 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleatorioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aleatorioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aleatorio = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",3)
	            .put("value",-1)
	            .put("operator",(String) operador)
	            .put("valueFrom",(JSONObject) aleatorio)
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionSimpleContinuacion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CondicionDeComparacionConParentesis ::= OperadorNegacion PARENTESISABRE CondicionDeComparacionSimple PARENTESISCIERRA 
            {
              Object RESULT =null;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object negacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int comparacionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int comparacionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object comparacion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier","")
	            .put("type",4)
	            .put("value",(Boolean) negacion)
	            .put("compareWith",new JSONObject())
	            .put("valueFrom",(JSONObject) comparacion)
	            .put("isBracket",true)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionDeComparacionConParentesis",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CondicionLogica ::= CondicionDeComparacionConParentesis OPERADORLOGICO CondicionDeComparacionConParentesis 
            {
              Object RESULT =null;
		int izquierdaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int izquierdaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object izquierda = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int derechaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int derecharight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object derecha = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    RESULT =
	        new JSONObject()
	            .put("identifier",(String) operador)
	            .put("type",5)
	            .put("value",-1)
	            .put("compareWith",(JSONObject) derecha)
	            .put("valueFrom",(JSONObject) izquierda)
	            .put("isBracket",false)
	    ;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionLogica",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$20 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EstrucutraDeControlIfElse ::= SINOSI PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE NT$20 BloqueDeInstrucciones LLAVECIERRA EstrucutraDeControlIfElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int anterioresleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int anterioresright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object anteriores = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","SINOSI")
            //.put("continue",(ArrayList<JSONObject>) anteriores)
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	    //instruccionesDelPrograma.add(temporal);
	    ArrayList<JSONObject> lista = (ArrayList<JSONObject>) anteriores;
	    lista.add(temporal);
	    RESULT = lista;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIfElse",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EstrucutraDeControlIfElse ::= EstrucutraDeControlElse 
            {
              Object RESULT =null;
		int elsefinalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elsefinalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elsefinal = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (ArrayList<JSONObject>) elsefinal; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlIfElse",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$21 ::= 
            {
              Object RESULT =null;


	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();

	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EstrucutraDeControlElse ::= SINO LLAVEABRE NT$21 BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("subprogram",instruccionesDelPrograma)
	        .put("instruction","SINO")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	    //instruccionesDelPrograma.add(temporal);
	    ArrayList<JSONObject> lista = new ArrayList<>();
	    lista.add(temporal);
	    RESULT = lista;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlElse",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EstrucutraDeControlElse ::= 
            {
              Object RESULT =null;
		
        ArrayList<JSONObject> listaVacia = new ArrayList<>();
        RESULT = listaVacia;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlElse",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EstrucutraDeControlCase ::= COMPARAR PARENTESISABRE IDENTIFICADOR PARENTESISCIERRA LLAVEABRE Casos CasoDefault LLAVECIERRA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int casesJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int casesJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object casesJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int defaultJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int defaultJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object defaultJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
	    instruccionesDelPrograma.add(
	        new JSONObject()
	            .put("instruction","COMPARAR")
	            .put("identifier",identificador)
	            //.put("cases",new JSONObject())
	            //.put("default",new JSONObject())
	            .put("cases",(JSONObject) casesJSON)
	            .put("default",(JSONObject) defaultJSON)
	    );
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlCase",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$22 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Casos ::= CASO CondicionParaCasos DOSPUNTOS NT$22 BloqueDeInstrucciones FinalOpcional Casos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int finalOpcionalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int finalOpcionalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object finalOpcional = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int casosAnterioresleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int casosAnterioresright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object casosAnteriores = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        JSONObject temporal = new JSONObject();
        temporal
            .put("condition", (JSONObject) condicion)
            .put("instruction","CASO")
            .put("subprogram",instruccionesDelPrograma)
            .put("end",finalOpcional)
            .put("continue", casosAnteriores)
        ;
        instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();
        //instruccionesDelPrograma.add(temporal);
        //ArrayList<JSONObject> lista = (ArrayList<JSONObject>) anteriores;
        //lista.add(temporal);
        RESULT = temporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Casos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Casos ::= 
            {
              Object RESULT =null;
		 RESULT = new JSONObject(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Casos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CondicionParaCasos ::= OperadorDeComparacionOpcional NUMERO 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT =
            new JSONObject()
                .put("operator", (String) operador)
                .put("valueFrom", new JSONObject())
                .put("type",0)
                .put("value",Integer.valueOf((String) numero))
        ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionParaCasos",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CondicionParaCasos ::= OperadorDeComparacionOpcional NumeroAleatorio 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT =
            new JSONObject()
                .put("operator", (String) operador)
                .put("valueFrom", (JSONObject) objetoJSON)
                .put("type",1)
                .put("value",-1)
        ;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CondicionParaCasos",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OperadorDeComparacionOpcional ::= OPERADORDECOMPARACION 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = (String) operador ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorDeComparacionOpcional",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OperadorDeComparacionOpcional ::= 
            {
              Object RESULT =null;
		 RESULT = "" ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorDeComparacionOpcional",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$23 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CasoDefault ::= DEFAULT DOSPUNTOS NT$23 BloqueDeInstrucciones FinalOpcional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        JSONObject temporal = new JSONObject();
        temporal
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","DEFAULT")
            .put("end",true)
            //.put("continue",(ArrayList<JSONObject>) anteriores)
        ;
        instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();
        //instruccionesDelPrograma.add(temporal);
        //ArrayList<JSONObject> lista = (ArrayList<JSONObject>) anteriores;
        //lista.add(temporal);
        RESULT = temporal;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CasoDefault",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FinalOpcional ::= FIN PUNTOYCOMA 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalOpcional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FinalOpcional ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalOpcional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$24 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int listaInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int listaInstruccionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object listaInstrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int listaInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int listaInstruccionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object listaInstrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EstrucutraDeControlFor ::= PARA PARENTESISABRE NT$24 DeclaracionesParaFor NT$25 PUNTOYCOMA Condicion PUNTOYCOMA NT$26 InstruccionesParaFor NT$27 PARENTESISCIERRA LLAVEABRE NT$28 BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int listaDeDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int listaDeDeclaracionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object listaDeDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int listaInstruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int listaInstruccionesright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object listaInstrucciones = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
        JSONObject temporal = new JSONObject();
        temporal
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","FOR")
            .put("declarations",listaDeDeclaraciones)
            .put("condition",condicion)
            .put("increments",listaInstrucciones)
        ;
        instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
        pilaDeInstrucciones = (Stack) pilaDePilas.pop();

        instruccionesDelPrograma.add(temporal);
	 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlFor",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$29 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("valueFrom",(JSONObject) objetoJSON)
                .put("instruction","MODIFICAVARIABLEFOR")
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DeclaracionesParaFor ::= IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$29 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$30 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("valueFrom",(JSONObject) objetoJSON)
                .put("instruction","CREAVARIABLETEMPORALFOR")
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DeclaracionesParaFor ::= VARIABLE IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$30 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DeclaracionesParaFor ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaFor",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$31 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

         instruccionesDelPrograma.add(
            new JSONObject()
                 .put("identifier",identificador)
                 .put("valueFrom",(JSONObject) objetoJSON)
                 .put("instruction","MODIFICAVARIABLEFOR")
        );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DeclaracionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$31 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$32 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

       instruccionesDelPrograma.add(
            new JSONObject()
                   .put("identifier",identificador)
                   .put("valueFrom",(JSONObject) objetoJSON)
                   .put("instruction","CREAVARIABLETEMPORALFOR")
            );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DeclaracionesParaForContinuacion ::= SEPARADOR VARIABLE IDENTIFICADOR AsignacionDeValoresAlDeclararVariable NT$32 DeclaracionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int objetoJSONleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int objetoJSONright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object objetoJSON = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DeclaracionesParaForContinuacion ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionesParaForContinuacion",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$33 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","INCREMENTAVARIABLEFOR")
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // InstruccionesParaFor ::= IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA NT$33 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$34 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

       instruccionesDelPrograma.add(
            new JSONObject()
                   .put("identifier",identificador)
                   .put("instruction","DECREMENTAVARIABLEFOR")
            );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InstruccionesParaFor ::= IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA NT$34 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // InstruccionesParaFor ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
	    RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaFor",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$35 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","INCREMENTAVARIABLEFOR")
	    );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // InstruccionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA NT$35 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$36 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

       instruccionesDelPrograma.add(
            new JSONObject()
                   .put("identifier",identificador)
                   .put("instruction","DECREMENTAVARIABLEFOR")
            );
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InstruccionesParaForContinuacion ::= SEPARADOR IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA NT$36 InstruccionesParaForContinuacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // InstruccionesParaForContinuacion ::= 
            {
              Object RESULT =null;
		
	    ArrayList<JSONObject> resultadoTemporal = (ArrayList<JSONObject>) instruccionesDelPrograma;
        RESULT = resultadoTemporal;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesParaForContinuacion",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$37 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EstrucutraDeControlDoWhile ::= HACER LLAVEABRE NT$37 BloqueDeInstrucciones LLAVECIERRA REPITE PARENTESISABRE Condicion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","HACER")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();

	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlDoWhile",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$38 ::= 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EstrucutraDeControlWhile ::= REPITEHASTA PARENTESISABRE Condicion PARENTESISCIERRA LLAVEABRE NT$38 BloqueDeInstrucciones LLAVECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("condition",(JSONObject) condicion)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","REPITEHASTA")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();

	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EstrucutraDeControlWhile",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // inrementosYDecrementos ::= IDENTIFICADOR OPERADORARITMETICOSUMA OPERADORARITMETICOSUMA PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","INCREMENTAVARIABLE")
	    );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inrementosYDecrementos",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // inrementosYDecrementos ::= IDENTIFICADOR OPERADORARITMETICORESTA OPERADORARITMETICORESTA PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        instruccionesDelPrograma.add(
	        new JSONObject()
                .put("identifier",identificador)
                .put("instruction","DECREMENTAVARIABLE")
	    );
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inrementosYDecrementos",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$39 ::= 
            {
              Object RESULT =null;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

	    pilaDePilas.add(pilaDeInstrucciones);
	    pilaDeInstrucciones = new Stack();
	    pilaDeInstrucciones.add(instruccionesDelPrograma);
	    instruccionesDelPrograma = new ArrayList<>();
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$42 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;

	    JSONObject temporal = new JSONObject();
	    temporal
	        .put("parameter",parametros)
            .put("subprogram",instruccionesDelPrograma)
            .put("instruction","FUNCION")
	    ;
	    instruccionesDelPrograma = (ArrayList<JSONObject>) pilaDeInstrucciones.pop();
	    pilaDeInstrucciones = (Stack) pilaDePilas.pop();

	    instruccionesDelPrograma.add(temporal);
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Funciones ::= IDENTIFICADOR PARENTESISABRE NT$39 ParametrosDeEntrada NT$40 PARENTESISCIERRA LLAVEABRE NT$41 BloqueDeInstrucciones LLAVECIERRA NT$42 Funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Funciones",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Funciones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Funciones",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$43 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                .put("instruction","DECLARAFUNCION")
        );
        RESULT = instruccionesDelPrograma;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ParametrosDeEntrada ::= VARIABLE IDENTIFICADOR NT$43 MasParametrosDeEntrada 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntrada",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ParametrosDeEntrada ::= 
            {
              Object RESULT =null;
		 RESULT = instruccionesDelPrograma; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosDeEntrada",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$44 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

	    instruccionesDelPrograma.add(
            new JSONObject()
                .put("identifier",identificador)
                .put("instruction","DECLARAFUNCION")
        );
        RESULT = instruccionesDelPrograma;
	
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // MasParametrosDeEntrada ::= SEPARADOR VARIABLE IDENTIFICADOR NT$44 MasParametrosDeEntrada 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosDeEntrada",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // MasParametrosDeEntrada ::= 
            {
              Object RESULT =null;
		 RESULT = instruccionesDelPrograma; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosDeEntrada",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OperadorNegacion ::= OPERADORNEGACION 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorNegacion",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OperadorNegacion ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorNegacion",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
